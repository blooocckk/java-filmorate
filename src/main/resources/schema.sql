DROP TABLE IF EXISTS FRIENDSHIP, USERS, FILM_GENRE, FILMS, RATING, LIKES, GENRE;

-- PUBLIC.GENRE definition
CREATE TABLE IF NOT EXISTS PUBLIC.GENRE (
    GENRE_ID BIGINT NOT NULL AUTO_INCREMENT,
    NAME CHARACTER VARYING(255),
    CONSTRAINT GENRE_PK PRIMARY KEY (GENRE_ID)
);
CREATE UNIQUE INDEX IF NOT EXISTS PRIMARY_KEY_4 ON PUBLIC.GENRE (GENRE_ID);


-- PUBLIC.RATING definition
CREATE TABLE IF NOT EXISTS PUBLIC.RATING (
    RATING_ID BIGINT NOT NULL AUTO_INCREMENT,
    NAME CHARACTER VARYING(255),
    CONSTRAINT RATING_PK PRIMARY KEY (RATING_ID)
);
CREATE UNIQUE INDEX IF NOT EXISTS PRIMARY_KEY_8 ON PUBLIC.RATING (RATING_ID);


-- PUBLIC.USERS definition
CREATE TABLE IF NOT EXISTS PUBLIC.USERS (
    ID BIGINT NOT NULL AUTO_INCREMENT,
    EMAIL CHARACTER VARYING(255) NOT NULL CHECK (EMAIL <> '') CHECK (EMAIL LIKE '%@%.%'),
    LOGIN CHARACTER VARYING(255) NOT NULL CHECK (LOGIN <> ''),
    CONSTRAINT LOGIN_NO_SPACES CHECK (LOGIN NOT LIKE '% %'),
    NAME CHARACTER VARYING(255),
    BIRTHDAY DATE CHECK (BIRTHDAY <= CURRENT_DATE),
    CONSTRAINT USERS_PK PRIMARY KEY (ID)
);
CREATE UNIQUE INDEX IF NOT EXISTS PRIMARY_KEY_4D ON PUBLIC.USERS (ID);


-- PUBLIC.FILMS definition
CREATE TABLE IF NOT EXISTS PUBLIC.FILMS (
    ID BIGINT NOT NULL AUTO_INCREMENT,
    NAME CHARACTER VARYING(100) NOT NULL CHECK (NAME <> ''),
    DESCRIPTION CHARACTER VARYING(200),
    RELEASEDATE DATE CHECK (RELEASEDATE >= '1895-12-28'),
    DURATION INTEGER CHECK (DURATION > 0),
    RATING_ID BIGINT,
    CONSTRAINT FILMS_PK PRIMARY KEY (ID),
    CONSTRAINT FILMS_RATING_FK FOREIGN KEY (RATING_ID) REFERENCES PUBLIC.RATING(RATING_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
);
CREATE INDEX IF NOT EXISTS FILMS_RATING_FK_INDEX_3 ON PUBLIC.FILMS (RATING_ID);
CREATE UNIQUE INDEX IF NOT EXISTS PRIMARY_KEY_3 ON PUBLIC.FILMS (ID);


-- PUBLIC.FRIENDSHIP definition
CREATE TABLE IF NOT EXISTS PUBLIC.FRIENDSHIP (
	USER1_ID BIGINT NOT NULL,
	USER2_ID BIGINT NOT NULL,
	STATUS BOOLEAN,
	CONSTRAINT FRIENDSHIP_PK PRIMARY KEY (USER1_ID,USER2_ID),
	CONSTRAINT FRIENDSHIP_USER1_FK FOREIGN KEY (USER1_ID) REFERENCES PUBLIC.USERS(ID) ON DELETE RESTRICT ON UPDATE RESTRICT,
    CONSTRAINT FRIENDSHIP_USER2_FK FOREIGN KEY (USER2_ID) REFERENCES PUBLIC.USERS(ID) ON DELETE RESTRICT ON UPDATE RESTRICT
);
CREATE INDEX IF NOT EXISTS FRIENDSHIP_USER1_FK_INDEX_B ON PUBLIC.FRIENDSHIP (USER1_ID);
CREATE INDEX IF NOT EXISTS FRIENDSHIP_USER2_FK_INDEX_B ON PUBLIC.FRIENDSHIP (USER2_ID);


-- PUBLIC.LIKES definition
CREATE TABLE IF NOT EXISTS PUBLIC.LIKES (
    FILM_ID BIGINT,
    USER_ID BIGINT,
    CONSTRAINT LIKES_PK PRIMARY KEY (FILM_ID,USER_ID),
    CONSTRAINT LIKES_FILM_FK FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILMS(ID) ON DELETE RESTRICT ON UPDATE RESTRICT,
    CONSTRAINT LIKES_USER_FK FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS(ID) ON DELETE RESTRICT ON UPDATE RESTRICT
);
CREATE INDEX IF NOT EXISTS LIKES_FILM_FK_INDEX_4 ON PUBLIC.LIKES (FILM_ID);
CREATE INDEX IF NOT EXISTS LIKES_USER_FK_INDEX_4 ON PUBLIC.LIKES (USER_ID);


-- PUBLIC.FILM_GENRE definition
CREATE TABLE IF NOT EXISTS PUBLIC.FILM_GENRE (
    FILM_ID BIGINT,
    GENRE_ID BIGINT,
    CONSTRAINT FILM_GENRE_PK PRIMARY KEY (FILM_ID,GENRE_ID),
    CONSTRAINT FILM_GENRE_FK1 FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILMS(ID) ON DELETE RESTRICT ON UPDATE RESTRICT,
    CONSTRAINT FILM_GENRE_FK2 FOREIGN KEY (GENRE_ID) REFERENCES PUBLIC.GENRE(GENRE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
);
CREATE INDEX IF NOT EXISTS FILM_GENRE_FK1_INDEX_7 ON PUBLIC.FILM_GENRE (FILM_ID);
CREATE INDEX IF NOT EXISTS FILM_GENRE_FK2_INDEX_7 ON PUBLIC.FILM_GENRE (GENRE_ID);
